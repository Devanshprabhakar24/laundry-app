{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dev24\\\\Documents\\\\Project\\\\laundry-app\\\\frontend\\\\src\\\\context\\\\authContext.js\",\n  _s = $RefreshSig$();\n// Example: frontend/src/context/authContext.js\n\nimport React, { createContext, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n\n  // Set the base URL for all API requests\n  const api = axios.create({\n    baseURL: 'http://localhost:5000/api/v1' // ✅ Correct base URL\n  });\n  const register = async (name, email, password) => {\n    try {\n      const res = await api.post('/auth/register', {\n        name,\n        email,\n        password\n      });\n\n      // On success, save the token and user data\n      localStorage.setItem('token', res.data.token);\n      setToken(res.data.token);\n      setUser(res.data.user);\n      return {\n        success: true\n      };\n    } catch (err) {\n      // This is the key part for error handling\n      if (err.response) {\n        // The server responded with an error (e.g., \"User already exists\")\n        return {\n          success: false,\n          message: err.response.data.error\n        };\n      } else if (err.request) {\n        // The request was made but no response was received (your \"Network Error\")\n        return {\n          success: false,\n          message: 'Network Error: Could not connect to server.'\n        };\n      } else {\n        // Something else went wrong\n        return {\n          success: false,\n          message: 'An unexpected error occurred.'\n        };\n      }\n    }\n  };\n\n  // ... (login, logout functions, etc.)\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      register /*, login, logout */\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"Ov/j5WT1vrCqr/3PCYKRmR8/2ik=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","localStorage","getItem","api","create","baseURL","register","name","email","password","res","post","setItem","data","success","err","response","message","error","request","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dev24/Documents/Project/laundry-app/frontend/src/context/authContext.js"],"sourcesContent":["// Example: frontend/src/context/authContext.js\r\n\r\nimport React, { createContext, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n\r\n  // Set the base URL for all API requests\r\n  const api = axios.create({\r\n    baseURL: 'http://localhost:5000/api/v1', // ✅ Correct base URL\r\n  });\r\n\r\n  const register = async (name, email, password) => {\r\n    try {\r\n      const res = await api.post('/auth/register', { name, email, password });\r\n\r\n      // On success, save the token and user data\r\n      localStorage.setItem('token', res.data.token);\r\n      setToken(res.data.token);\r\n      setUser(res.data.user);\r\n      \r\n      return { success: true };\r\n\r\n    } catch (err) {\r\n      // This is the key part for error handling\r\n      if (err.response) {\r\n        // The server responded with an error (e.g., \"User already exists\")\r\n        return { success: false, message: err.response.data.error };\r\n      } else if (err.request) {\r\n        // The request was made but no response was received (your \"Network Error\")\r\n        return { success: false, message: 'Network Error: Could not connect to server.' };\r\n      } else {\r\n        // Something else went wrong\r\n        return { success: false, message: 'An unexpected error occurred.' };\r\n      }\r\n    }\r\n  };\r\n\r\n  // ... (login, logout functions, etc.)\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, token, register /*, login, logout */ }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AACtD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAACY,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;;EAEjE;EACA,MAAMC,GAAG,GAAGb,KAAK,CAACc,MAAM,CAAC;IACvBC,OAAO,EAAE,8BAA8B,CAAE;EAC3C,CAAC,CAAC;EAEF,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,KAAK;IAChD,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,gBAAgB,EAAE;QAAEJ,IAAI;QAAEC,KAAK;QAAEC;MAAS,CAAC,CAAC;;MAEvE;MACAR,YAAY,CAACW,OAAO,CAAC,OAAO,EAAEF,GAAG,CAACG,IAAI,CAACd,KAAK,CAAC;MAC7CC,QAAQ,CAACU,GAAG,CAACG,IAAI,CAACd,KAAK,CAAC;MACxBD,OAAO,CAACY,GAAG,CAACG,IAAI,CAAChB,IAAI,CAAC;MAEtB,OAAO;QAAEiB,OAAO,EAAE;MAAK,CAAC;IAE1B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ;MACA,IAAIA,GAAG,CAACC,QAAQ,EAAE;QAChB;QACA,OAAO;UAAEF,OAAO,EAAE,KAAK;UAAEG,OAAO,EAAEF,GAAG,CAACC,QAAQ,CAACH,IAAI,CAACK;QAAM,CAAC;MAC7D,CAAC,MAAM,IAAIH,GAAG,CAACI,OAAO,EAAE;QACtB;QACA,OAAO;UAAEL,OAAO,EAAE,KAAK;UAAEG,OAAO,EAAE;QAA8C,CAAC;MACnF,CAAC,MAAM;QACL;QACA,OAAO;UAAEH,OAAO,EAAE,KAAK;UAAEG,OAAO,EAAE;QAAgC,CAAC;MACrE;IACF;EACF,CAAC;;EAED;;EAEA,oBACEzB,OAAA,CAACC,WAAW,CAAC2B,QAAQ;IAACC,KAAK,EAAE;MAAExB,IAAI;MAAEE,KAAK;MAAEO,QAAQ,CAAC;IAAqB,CAAE;IAAAX,QAAA,EACzEA;EAAQ;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC7B,EAAA,CA1CWF,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}