{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dev24\\\\Documents\\\\Project\\\\laundry-app\\\\frontend\\\\src\\\\context\\\\authContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport api from '../utils/axios'; // ✅ Import the central api instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // This effect runs once when the app starts\n    if (token) {\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      // Fetch user data if token exists\n      api.get('/auth/me') // You will need to create this backend route\n      .then(res => {\n        setUser(res.data.user);\n      }).catch(() => {\n        // If token is invalid, log the user out\n        localStorage.removeItem('token');\n        setToken(null);\n        delete api.defaults.headers.common['Authorization'];\n      }).finally(() => setLoading(false));\n    } else {\n      setLoading(false);\n    }\n  }, [token]);\n  const login = async (email, password) => {\n    const res = await api.post('/auth/login', {\n      email,\n      password\n    });\n    localStorage.setItem('token', res.data.token);\n    setToken(res.data.token);\n    api.defaults.headers.common['Authorization'] = `Bearer ${res.data.token}`;\n    setUser(res.data.user);\n    return res.data;\n  };\n  const register = async (name, email, password) => {\n    return await api.post('/auth/register', {\n      name,\n      email,\n      password\n    });\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n    delete api.defaults.headers.common['Authorization'];\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      user,\n      loading,\n      login,\n      register,\n      logout\n    },\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the context easily\n_s(AuthProvider, \"6yaUUgx9bt/8SVo6kb7BgPC/qRU=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","localStorage","getItem","loading","setLoading","defaults","headers","common","get","then","res","data","catch","removeItem","finally","login","email","password","post","setItem","register","name","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/dev24/Documents/Project/laundry-app/frontend/src/context/authContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport api from '../utils/axios'; // ✅ Import the central api instance\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // This effect runs once when the app starts\r\n    if (token) {\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      // Fetch user data if token exists\r\n      api.get('/auth/me') // You will need to create this backend route\r\n        .then(res => {\r\n          setUser(res.data.user);\r\n        })\r\n        .catch(() => {\r\n          // If token is invalid, log the user out\r\n          localStorage.removeItem('token');\r\n          setToken(null);\r\n          delete api.defaults.headers.common['Authorization'];\r\n        })\r\n        .finally(() => setLoading(false));\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, [token]);\r\n\r\n  const login = async (email, password) => {\r\n    const res = await api.post('/auth/login', { email, password });\r\n    localStorage.setItem('token', res.data.token);\r\n    setToken(res.data.token);\r\n    api.defaults.headers.common['Authorization'] = `Bearer ${res.data.token}`;\r\n    setUser(res.data.user);\r\n    return res.data;\r\n  };\r\n\r\n  const register = async (name, email, password) => {\r\n    return await api.post('/auth/register', { name, email, password });\r\n  };\r\n  \r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setToken(null);\r\n    setUser(null);\r\n    delete api.defaults.headers.common['Authorization'];\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ token, user, loading, login, register, logout }}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the context easily\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7E,OAAOC,GAAG,MAAM,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElC,OAAO,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAACc,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACjE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACA,IAAIW,KAAK,EAAE;MACTT,GAAG,CAACe,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUR,KAAK,EAAE;MAChE;MACAT,GAAG,CAACkB,GAAG,CAAC,UAAU,CAAC,CAAC;MAAA,CACjBC,IAAI,CAACC,GAAG,IAAI;QACXZ,OAAO,CAACY,GAAG,CAACC,IAAI,CAACd,IAAI,CAAC;MACxB,CAAC,CAAC,CACDe,KAAK,CAAC,MAAM;QACX;QACAX,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;QAChCb,QAAQ,CAAC,IAAI,CAAC;QACd,OAAOV,GAAG,CAACe,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;MACrD,CAAC,CAAC,CACDO,OAAO,CAAC,MAAMV,UAAU,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC,MAAM;MACLA,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACL,KAAK,CAAC,CAAC;EAEX,MAAMgB,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,MAAMP,GAAG,GAAG,MAAMpB,GAAG,CAAC4B,IAAI,CAAC,aAAa,EAAE;MAAEF,KAAK;MAAEC;IAAS,CAAC,CAAC;IAC9DhB,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAET,GAAG,CAACC,IAAI,CAACZ,KAAK,CAAC;IAC7CC,QAAQ,CAACU,GAAG,CAACC,IAAI,CAACZ,KAAK,CAAC;IACxBT,GAAG,CAACe,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUG,GAAG,CAACC,IAAI,CAACZ,KAAK,EAAE;IACzED,OAAO,CAACY,GAAG,CAACC,IAAI,CAACd,IAAI,CAAC;IACtB,OAAOa,GAAG,CAACC,IAAI;EACjB,CAAC;EAED,MAAMS,QAAQ,GAAG,MAAAA,CAAOC,IAAI,EAAEL,KAAK,EAAEC,QAAQ,KAAK;IAChD,OAAO,MAAM3B,GAAG,CAAC4B,IAAI,CAAC,gBAAgB,EAAE;MAAEG,IAAI;MAAEL,KAAK;MAAEC;IAAS,CAAC,CAAC;EACpE,CAAC;EAED,MAAMK,MAAM,GAAGA,CAAA,KAAM;IACnBrB,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;IAChCb,QAAQ,CAAC,IAAI,CAAC;IACdF,OAAO,CAAC,IAAI,CAAC;IACb,OAAOR,GAAG,CAACe,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;EACrD,CAAC;EAED,oBACEf,OAAA,CAACC,WAAW,CAAC8B,QAAQ;IAACC,KAAK,EAAE;MAAEzB,KAAK;MAAEF,IAAI;MAAEM,OAAO;MAAEY,KAAK;MAAEK,QAAQ;MAAEE;IAAO,CAAE;IAAA3B,QAAA,EAC5E,CAACQ,OAAO,IAAIR;EAAQ;IAAA8B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B,CAAC;;AAED;AAAAhC,EAAA,CArDaF,YAAY;AAAAmC,EAAA,GAAZnC,YAAY;AAsDzB,OAAO,MAAMoC,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAO1C,UAAU,CAACI,WAAW,CAAC;AAChC,CAAC;AAACsC,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}